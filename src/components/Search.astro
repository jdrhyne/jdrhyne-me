---
// Search component for client-side search
---

<div class="max-w-md mx-auto mb-8">
  <div class="relative">
    <input
      type="text"
      id="search-input"
      placeholder="Search posts..."
      class="w-full px-4 py-2 pl-10 pr-4 text-gray-700 bg-white border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
    />
    <div class="absolute inset-y-0 left-0 flex items-center pl-3">
      <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
    </div>
    <button
      id="clear-search"
      class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600 transition-colors hidden"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>
  
  <div id="search-results" class="mt-4 hidden">
    <div class="text-sm text-gray-600 mb-4">
      <span id="search-count">0</span> results found
    </div>
    <div id="search-list" class="space-y-4"></div>
  </div>
  
  <div id="no-results" class="mt-4 text-center text-gray-600 hidden">
    No posts found matching your search.
  </div>
</div>

<script>
  // Client-side search functionality
  let searchData = [];
  
  // Fetch search data
  async function loadSearchData() {
    try {
      const response = await fetch('/search.json');
      searchData = await response.json();
    } catch (error) {
      console.error('Failed to load search data:', error);
    }
  }
  
  // Search function
  function performSearch(query) {
    if (!query.trim()) {
      return [];
    }
    
    const searchTerms = query.toLowerCase().split(' ').filter(term => term.length > 0);
    
    return searchData.filter(post => {
      const searchableText = [
        post.title,
        post.description,
        post.content,
        ...post.tags
      ].join(' ').toLowerCase();
      
      return searchTerms.every(term => searchableText.includes(term));
    });
  }
  
  // Render search results
  function renderResults(results) {
    const searchResults = document.getElementById('search-results');
    const searchList = document.getElementById('search-list');
    const searchCount = document.getElementById('search-count');
    const noResults = document.getElementById('no-results');
    
    if (results.length === 0) {
      searchResults.classList.add('hidden');
      noResults.classList.remove('hidden');
      return;
    }
    
    noResults.classList.add('hidden');
    searchResults.classList.remove('hidden');
    searchCount.textContent = results.length;
    
    searchList.innerHTML = results.map(post => `
      <div class="border border-gray-200 rounded-lg p-4 hover:border-blue-300 transition-colors">
        <h3 class="font-medium text-gray-900 mb-2">
          <a href="/blog/${post.slug}" class="hover:text-blue-600 transition-colors">
            ${post.title}
          </a>
        </h3>
        <p class="text-gray-600 text-sm mb-2">${post.description}</p>
        <div class="flex items-center justify-between text-xs text-gray-500">
          <div class="flex gap-2">
            ${post.tags.map(tag => `
              <span class="bg-gray-100 px-2 py-1 rounded">${tag}</span>
            `).join('')}
          </div>
          <span>${new Date(post.pubDate).toLocaleDateString()}</span>
        </div>
      </div>
    `).join('');
  }
  
  // Clear search
  function clearSearch() {
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');
    const noResults = document.getElementById('no-results');
    const clearButton = document.getElementById('clear-search');
    
    searchInput.value = '';
    searchResults.classList.add('hidden');
    noResults.classList.add('hidden');
    clearButton.classList.add('hidden');
  }
  
  // Initialize search
  document.addEventListener('DOMContentLoaded', async () => {
    await loadSearchData();
    
    const searchInput = document.getElementById('search-input');
    const clearButton = document.getElementById('clear-search');
    
    let searchTimeout;
    
    searchInput.addEventListener('input', (e) => {
      const query = e.target.value;
      
      // Show/hide clear button
      if (query.length > 0) {
        clearButton.classList.remove('hidden');
      } else {
        clearButton.classList.add('hidden');
        clearSearch();
        return;
      }
      
      // Debounce search
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        const results = performSearch(query);
        renderResults(results);
      }, 300);
    });
    
    clearButton.addEventListener('click', clearSearch);
  });
</script>