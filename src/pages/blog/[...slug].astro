---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { Clock, Calendar, ArrowLeft, Share, Copy, Check } from 'lucide-astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }) => {
    return !data.draft;
  });
  
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

const post = Astro.props;
const { Content } = await post.render();

function formatDate(date: Date) {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

function estimateReadingTime(content: string) {
  const wordsPerMinute = 200;
  const words = content.split(/\s+/).length;
  return Math.ceil(words / wordsPerMinute);
}

// Get the raw content for reading time calculation
const readingTime = estimateReadingTime(post.body);
---

<Layout title={post.data.title} description={post.data.description}>
  <article class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
    <!-- Header -->
    <header class="mb-16">
      <div class="text-center">
        <h1 class="text-5xl md:text-6xl font-bold text-gray-900 mb-6 leading-tight">
          {post.data.title}
        </h1>
        <p class="text-xl md:text-2xl text-gray-600 mb-8 max-w-4xl mx-auto leading-relaxed font-light">
          {post.data.description}
        </p>
        <div class="flex flex-col sm:flex-row items-center justify-center gap-6 text-sm text-gray-600 mb-6">
          <div class="flex items-center gap-2">
            <Calendar class="w-4 h-4" />
            <time datetime={post.data.pubDate.toISOString()} class="font-medium">
              {formatDate(new Date(post.data.pubDate))}
            </time>
          </div>
          <div class="flex items-center gap-2">
            <Clock class="w-4 h-4" />
            <span class="font-medium">{readingTime} min read</span>
          </div>
          {post.data.updatedDate && (
            <div class="flex items-center gap-2">
              <span class="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full font-medium">Updated {formatDate(new Date(post.data.updatedDate))}</span>
            </div>
          )}
        </div>
        {post.data.tags && post.data.tags.length > 0 && (
          <div class="flex flex-wrap justify-center gap-3 mt-6">
            {post.data.tags.map((tag) => (
              <a 
                href={`/tags/${tag}`}
                class="inline-block bg-blue-50 hover:bg-blue-100 text-blue-700 text-sm px-4 py-2 rounded-full font-medium transition-colors"
              >
                {tag}
              </a>
            ))}
          </div>
        )}
      </div>
    </header>

    <!-- Hero Image -->
    {post.data.heroImage && (
      <div class="mb-16">
        <img 
          src={post.data.heroImage} 
          alt={post.data.title}
          class="w-full h-80 md:h-96 object-cover rounded-2xl shadow-elegant-lg"
        />
      </div>
    )}

    <!-- Content -->
    <div class="prose prose-xl max-w-none">
      <Content />
    </div>

    <!-- Social Sharing -->
    <div class="mt-16 pt-8 border-t-2 border-gray-100">
      <div class="flex flex-col sm:flex-row items-center justify-between gap-6">
        <div class="text-lg text-gray-700 font-medium">
          Enjoyed this article? Share it with others:
        </div>
        <div class="flex items-center gap-4">
          <a 
            href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(post.data.title)}&url=${encodeURIComponent(Astro.url.href)}`}
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center gap-3 bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-xl transition-colors text-sm font-medium shadow-elegant hover:shadow-elegant-lg"
          >
            <Share class="w-4 h-4" />
            Share on X
          </a>
          <button 
            id="copy-link"
            class="inline-flex items-center gap-3 bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-xl transition-colors text-sm font-medium shadow-elegant hover:shadow-elegant-lg focus-ring"
          >
            <Copy class="w-4 h-4" id="copy-icon" />
            <Check class="w-4 h-4 hidden text-green-600" id="check-icon" />
            <span id="copy-text">Copy Link</span>
          </button>
        </div>
      </div>
    </div>

    <!-- Navigation -->
    <nav class="mt-16 pt-8 border-t-2 border-gray-100">
      <div class="flex justify-center">
        <a 
          href="/"
          class="inline-flex items-center gap-3 text-gray-700 hover:text-blue-700 transition-colors font-medium px-6 py-3 rounded-xl hover:bg-gray-50"
        >
          <ArrowLeft class="w-5 h-5" />
          Back to Home
        </a>
      </div>
    </nav>
  </article>

  <script>
    // Copy link functionality
    const copyButton = document.getElementById('copy-link');
    const copyIcon = document.getElementById('copy-icon');
    const checkIcon = document.getElementById('check-icon');
    const copyText = document.getElementById('copy-text');
    
    copyButton?.addEventListener('click', async () => {
      try {
        await navigator.clipboard.writeText(window.location.href);
        
        // Show success state
        copyIcon?.classList.add('hidden');
        checkIcon?.classList.remove('hidden');
        if (copyText) copyText.textContent = 'Copied!';
        
        // Reset after 2 seconds
        setTimeout(() => {
          copyIcon?.classList.remove('hidden');
          checkIcon?.classList.add('hidden');
          if (copyText) copyText.textContent = 'Copy Link';
        }, 2000);
      } catch (err) {
        console.error('Failed to copy link:', err);
      }
    });
  </script>
</Layout>